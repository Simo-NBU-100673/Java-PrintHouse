package Publication;

import Paper.Paper;
import ProjectExceptions.IllegalNegativeArgumentException;
import ProjectExceptions.ParameterFormatException;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class PrintHousePublication extends ClientDemand{
    private BigDecimal markup;
    private PublicationState state;

    //Default constructor without MARKUP generated by using ClientDemand
    public PrintHousePublication(ClientDemand clientDemand){
        super(clientDemand.getClientName(), clientDemand.getTitleOfPublication(), clientDemand.getNumberOfUnits(), clientDemand.getPaper());
        this.markup = BigDecimal.valueOf(0);
        this.state = PublicationState.DEFAULT;
    }
    //Constructor with MARKUP generated by using ClientDemand
    public PrintHousePublication(ClientDemand clientDemand, BigDecimal markup){
        super(clientDemand.getClientName(), clientDemand.getTitleOfPublication(), clientDemand.getNumberOfUnits(), clientDemand.getPaper());
        setMarkup(markup);
        this.state = PublicationState.DEFAULT;
    }

    public void setMarkup(BigDecimal markup){
        if (markup.compareTo(BigDecimal.valueOf(0)) >= 0){
            this.markup = markup;
        }else {
            try {
                throw new IllegalNegativeArgumentException("The markup can not be a negative value");
            } catch (IllegalNegativeArgumentException e) {
                this.markup = BigDecimal.valueOf(0);
                e.printStackTrace();
            }
        }
    }

    //Returns the COST of the Paper for one unit of this Publication
    public BigDecimal getCostPerUnit(){
        return super.getPaper().getPricePerPiece();
    }

    //Returns the COST for all units of this Publication
    public BigDecimal getPriceForAllUnitsOfPublication(){
        return this.getPricePerUnit().multiply(BigDecimal.valueOf(super.getNumberOfUnits()));
    }

    //Returns the PRICE of one Publication of this Publication
    public BigDecimal getPricePerUnit(){
        BigDecimal paperPrice = super.getPaper().getPricePerPiece();
        BigDecimal addedValue = paperPrice.multiply(this.markup).divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP);
        //            return super.getPaper().getPricePerPiece().add((super.getPaper().getPricePerPiece().multiply(this.markup)).divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP)).setScale(2,RoundingMode.HALF_UP);
        return paperPrice.add(addedValue).setScale(2,RoundingMode.HALF_UP);
    }

    public PublicationState getState() {
        return state;
    }

    public void setState(PublicationState state) {
        this.state = state;
    }

    @Override
    public String toString() {
        return "\nPrintHousePublication{" +
                "PricePerUnit = " + this.getPricePerUnit() +
                ", markup = " + markup + "%"+
                ", state = " + state +",\n"+
                super.toString()+
                "}";
    }
}
